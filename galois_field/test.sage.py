

# This file was *autogenerated* from the file test.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_0 = Integer(0); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_4 = Integer(4); _sage_const_16 = Integer(16); _sage_const_18 = Integer(18)

k = GF(_sage_const_3 )
v = k.fetch_int(_sage_const_0 )
print(type(v))
print(v)

g = GF(_sage_const_2 **_sage_const_2 )
b = g.fetch_int(_sage_const_0 )
print(type(v))
print(v)

def inverse(a, field):
    for x in range(field):
        if(a*x)%field ==_sage_const_1 :
            return x

#addition of different fields is not allowed
#print(b+v)

for i in range(_sage_const_1 ,_sage_const_3 ):
    v = k.fetch_int(i)
    v = inverse(int(v),_sage_const_3 )
    print(v)
print()

for i in range(_sage_const_1 ,_sage_const_4 ):
    v = g.fetch_int(i)
    v = _sage_const_1 /v
    print(v.integer_representation())

def is_power_of_two(n):
    return n > _sage_const_0  and (n & (n - _sage_const_1 )) == _sage_const_0 

# Example usage
print(is_power_of_two(_sage_const_1 ))   # True, as 2^0 = 1
print(is_power_of_two(_sage_const_2 ))   # True, as 2^1 = 2
print(is_power_of_two(_sage_const_3 ))   # False, not a power of 2
print(is_power_of_two(_sage_const_4 ))   # True, as 2^2 = 4
print(is_power_of_two(_sage_const_16 ))  # True, as 2^4 = 16
print(is_power_of_two(_sage_const_18 ))  # False, not a power of 2

